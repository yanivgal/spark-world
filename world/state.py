from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set
from datetime import datetime
from communication.messages.action_message import ActionMessage
from communication.messages.observation_packet import AgentStatus, BondStatus


@dataclass
class Bond:
    """A bond between agents that generates sparks"""
    bond_id: str
    members: Set[str]  # Set of agent_ids
    leader_id: str
    mission_id: Optional[str]  # None if no active mission
    sparks_generated_this_tick: int = 0


@dataclass
class Mission:
    """A collaborative mission for bonded agents"""
    mission_id: str
    bond_id: str
    title: str
    description: str
    goal: str
    current_progress: str
    leader_id: str
    assigned_tasks: Dict[str, str]  # agent_id -> task
    is_complete: bool = False
    created_tick: int = 0


@dataclass
class Agent:
    """Complete agent entity"""
    agent_id: str
    name: str
    species: str
    personality: List[str]
    quirk: str
    ability: str
    age: int
    sparks: int
    status: AgentStatus
    bond_status: BondStatus
    bond_members: List[str]
    home_realm: str
    backstory: str
    opening_goal: str
    speech_style: str


@dataclass
class WorldState:
    """
    The complete state of the Spark-World simulation.
    
    This is the central data structure that contains everything needed to run
    the simulation and generate observation packets for agents.
    
    Attributes:
        tick: Current simulation tick number
        is_running: Whether the simulation is currently running
        agents: All agents in the world, indexed by agent_id
        bonds: All bonds in the world, indexed by bond_id
        missions: All active missions, indexed by mission_id
        bob_sparks: Bob's current spark count
        bob_sparks_per_tick: How many sparks Bob gains per tick
        pending_actions: Actions waiting to be processed this tick
        all_agent_actions: All actions taken by agents this tick
        agent_actions_for_logging: Actions for logging (before processing)
        pending_bond_requests: Bond requests waiting to be processed
        bond_requests_for_display: Bond requests for display
        pending_spark_requests: Spark requests waiting to be processed
        message_queue: Messages waiting to be delivered to agents
        mission_meeting_messages: Mission meeting messages for this tick
        message_queue: Messages waiting to be delivered to agents
        events_this_tick: Raw events for Storyteller processing
        agents_vanished_this_tick: Agents that vanished this tick
        agents_spawned_this_tick: Agents that spawned this tick
        bonds_formed_this_tick: Bonds that formed this tick
        bonds_dissolved_this_tick: Bonds that dissolved this tick
        current_processing_stage: Current stage of the 6-stage tick
        mission_meetings_in_progress: Whether mission meetings are happening
        total_sparks_minted: Total sparks generated by bonds
        total_sparks_lost: Total sparks lost to upkeep
        total_raids_attempted: Total raid attempts
        total_bonds_formed: Total bonds formed
    """
    # Simulation Control
    tick: int = 0
    is_running: bool = True
    
    # Core Entities
    agents: Dict[str, Agent] = field(default_factory=dict)
    bonds: Dict[str, Bond] = field(default_factory=dict)
    missions: Dict[str, Mission] = field(default_factory=dict)
    
    # Game Mechanics State
    bob_sparks: int = 0  # Bob's current spark count (will be set based on agent count)
    bob_sparks_per_tick: int = 0  # How many Bob gains per tick (will be calculated)
    
    # Communication Queues
    pending_actions: List[ActionMessage] = field(default_factory=list)
    all_agent_actions: List[ActionMessage] = field(default_factory=list)
    agent_actions_for_logging: List[ActionMessage] = field(default_factory=list)  # Actions for logging (before processing)
    pending_bond_requests: Dict[str, List[ActionMessage]] = field(default_factory=dict)  # target_id -> list of bond requests
    bond_requests_for_display: Dict[str, ActionMessage] = field(default_factory=dict)  # target_id -> bond request (for display)
    pending_spark_requests: List[ActionMessage] = field(default_factory=list)  # request_spark actions for next tick
    message_queue: Dict[str, List[ActionMessage]] = field(default_factory=dict)  # agent_id -> messages
    mission_meeting_messages: List = field(default_factory=list)  # Mission meeting messages for this tick
    # --- Added for tick delay ---
    previous_tick_bond_requests: Dict[str, List[ActionMessage]] = field(default_factory=dict)  # For delayed inbox
    previous_tick_message_queue: Dict[str, List[ActionMessage]] = field(default_factory=dict)  # For delayed inbox
    # --- End added ---
    
    # Event Tracking
    events_this_tick: List[Dict] = field(default_factory=list)  # Raw events for Storyteller
    raid_results_this_tick: List = field(default_factory=list)  # RaidResult objects for Storyteller
    spark_transactions_this_tick: List = field(default_factory=list)  # SparkTransaction objects for Storyteller
    bob_responses_this_tick: List = field(default_factory=list)  # BobResponse objects for Storyteller
    agents_vanished_this_tick: List[str] = field(default_factory=list)
    agents_spawned_this_tick: List[str] = field(default_factory=list)
    bonds_formed_this_tick: List[str] = field(default_factory=list)
    bonds_dissolved_this_tick: List[str] = field(default_factory=list)
    
    # Processing State
    current_processing_stage: str = "idle"  # Current stage of the 6-stage tick
    mission_meetings_in_progress: bool = False
    
    # Statistics
    total_sparks_minted: int = 0
    total_sparks_lost: int = 0
    total_raids_attempted: int = 0
    total_bonds_formed: int = 0
    
    # Storyteller output
    storyteller_output: Optional[object] = None  # Will store StorytellerOutput
    
    # Agent state tracking
    agent_spark_changes: Dict[str, int] = field(default_factory=dict)  # agent_id -> spark change this tick
    agent_age_changes: Dict[str, int] = field(default_factory=dict)    # agent_id -> age change this tick
    agent_status_changes: Dict[str, str] = field(default_factory=dict) # agent_id -> status change this tick
    agent_bond_status_changes: Dict[str, str] = field(default_factory=dict) # agent_id -> bond status change this tick
    
    # Bond tracking
    bonds_formed_details: List[Dict] = field(default_factory=list)  # Detailed bond formation info
    bonds_dissolved_details: List[Dict] = field(default_factory=list)  # Detailed bond dissolution info
    
    # Mission tracking
    mission_progress_updates: List[Dict] = field(default_factory=list)  # Mission progress changes this tick
    mission_meeting_summaries: List[Dict] = field(default_factory=list)  # Meeting summaries this tick
    
    # Action tracking
    action_processing_results: List[Dict] = field(default_factory=list)  # Results of processing actions
    failed_actions: List[Dict] = field(default_factory=list)  # Actions that failed
    
    # Spark tracking
    spark_distribution_details: List[Dict] = field(default_factory=list)  # Who got what from bonds
    spark_minting_details: List[Dict] = field(default_factory=list)  # Bond spark generation details
    
    # Agent vanishing tracking
    vanished_agents_context: List[Dict] = field(default_factory=list)  # Context for vanished agents
    
    # Bob tracking
    bob_sparks_before: int = 0  # Bob's sparks at start of tick
    bob_sparks_after: int = 0   # Bob's sparks at end of tick
    bob_requests_received: List[Dict] = field(default_factory=list)  # Full context of requests
    
    # Tick statistics
    tick_statistics: Dict = field(default_factory=dict)  # Summary statistics for this tick 